from lab1.progonka import progonka
import numpy as np
import matplotlib.pyplot as plt


x = np.array([0.1, 0.5, 0.9, 1.3, 1.7])
f = np.array([100, 4, 1.2346, 0.59172, 0.34602])
x_star = 0.8

n = len(x)
#Разбиваем на шаги(diff находит расстояние между соседними элементами )
h = np.diff(x)

# Составляем коэффициенты СЛАУ для внутренних узлов
a_ = h[1:-1] 
b_ = 2 * (h[:-1] + h[1:])  
c_ = h[1:-1]

# Правая часть
d_ = 6 * ((f[2:] - f[1:-1]) / h[1:] - (f[1:-1] - f[:-2]) / h[:-1])

# Решаем СЛАУ методом прогонки для внутренних значений второй производной
m = np.zeros(n)
m[1:-1] = progonka(a_, b_, c_, d_)

# Теперь находим интервал, куда попадает x_star
# for i in range(n - 1):
#     if x[i] <= x_star <= x[i + 1]:
#         hi = x[i + 1] - x[i]
#         A = (x[i + 1] - x_star) / hi
#         B = (x_star - x[i]) / hi
#         S = (
#             A * f[i]
#             + B * f[i + 1]
#             + ((A**3 - A) * m[i] + (B**3 - B) * m[i + 1]) * (hi**2) / 6
#         )
#         break

# print(f"Значение сплайна в точке x* = {x_star} : {S}")


def spline_value(x_val):
    for i in range(n - 1):
        if x[i] <= x_val <= x[i + 1]:
            hi = x[i + 1] - x[i]
            A = (x[i + 1] - x_val) / hi
            B = (x_val - x[i]) / hi
            return (
                A * f[i]
                + B * f[i + 1]
                + ((A**3 - A) * m[i] + (B**3 - B) * m[i + 1]) * (hi**2) / 6
            )
    return None

S = spline_value(x_star)
print(f"Значение сплайна в точке x* = {x_star} : {S}")


# Построение графика
xx = np.linspace(x[0], x[-1], 500)
yy = [spline_value(xi) for xi in xx]

plt.figure(figsize=(8, 5))
plt.plot(xx, yy, label='Кубический сплайн', color='blue')
plt.plot(x, f, 'ro', label='Узлы интерполяции')
plt.plot(x_star, S, 'gs', label=f'S(x*) = {S:.5f}')
# plt.axvline(x_star, color='gray', linestyle='--', alpha=0.5)
plt.title('Кубический сплайн')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid(True)
plt.savefig("spline2")
plt.show()